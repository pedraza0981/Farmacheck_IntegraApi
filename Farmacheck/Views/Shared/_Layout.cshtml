@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - Farmacheck</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Estilos locales -->

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <!-- Iconos -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <!-- Estilos externos (solo si no usas local) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />

    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/use-bootstrap-tag@2.2.2/dist/use-bootstrap-tag.min.css">
    <link rel="stylesheet" href="~/css/task-list.css" asp-append-version="true" />
    <style>
        #sidebar .menu-scroll {
            flex: 1 1 auto;
            overflow-y: auto;
            min-height: 0;
            scrollbar-width: thin;
            scrollbar-color: #f7fafd rgba(255, 255, 255, 0.1);
        }

        #sidebar .menu-scroll::-webkit-scrollbar {
            width: 6px;
        }

        #sidebar .menu-scroll::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 4px;
        }

        #sidebar .menu-scroll::-webkit-scrollbar-thumb {
            background: linear-gradient(180deg, #0d6efd 0%, #0b5ed7 100%);
            border-radius: 4px;
        }

        #sidebar .menu-scroll::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(180deg, #0b5ed7 0%, #094db3 100%);
        }
    </style>

    @await RenderSectionAsync("Styles", required: false)

</head>
<body>
    <!-- Sidebar -->
    <div id="sidebar" class="sidebar text-white d-flex flex-column align-items-start" style="width: 240px; position: fixed; height: 100vh;">
        <!-- LOGO -->
        <div class="w-100 text-center p-3" style="background-color: white;">
            <img src="~/images/Logo_Header.png" alt="Logo" style="max-height: 50px;" />
        </div>

        <!-- MENÚ -->
        <div id="menuContainer" class="px-3 pt-3 w-100 flex-grow-1 menu-scroll">
        </div>
    </div>

    <!-- Header -->
    <header class="ms-240" style="margin-left: 240px;">
        <nav class="navbar navbar-light bg-white border-bottom shadow-sm p-2">
            <div class="container-fluid d-flex align-items-center justify-content-between">
                <button class="menu-toggle d-md-none me-2" aria-label="Abrir menú lateral" onclick="toggleSidebar()">☰</button>
                <img src="~/images/Logo_HeaderBlank.png" style="height: 55px;" />
                <div class="dropdown ms-2">
                    <button class="btn p-0" id="userDropdownBtn" type="button" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
                        <i class="bi bi-person-circle" style="font-size: 1.8rem;"></i>
                    </button>
                    <div id="userDropdownMenu" class="dropdown-menu dropdown-menu-end shadow rounded-3 p-3" style="width: 360px;">
                        @* <h6 class="mb-3 text-center">Usuario</h6> *@
                        <div id="userNameDisplay" class="fw-bold text-center text-dark"></div>
                        <button id="logoutBtn" class="btn btn-outline-brand w-100 mb-2">Cerrar sesión</button>
                    </div>
                </div>
            </div>
            <img src="~/images/linea_header.png" style="width: 100%; height: auto; display: block; margin-top: 5px;" />
        </nav>
    </header>

    <!-- Contenido principal -->
    <div class="main-content" style="margin-left: 240px; padding: 20px;">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <!-- Footer -->
    <footer class="text-muted" style="margin-left:240px; background-color:#f1f1f1; padding: 1rem 2rem;">
        &copy; 2025 - Farmacheck - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacidad</a>
    </footer>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/use-bootstrap-tag@2.2.2/dist/use-bootstrap-tag.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.full.min.js"></script>

    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <script>
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('show');
        }

        document.addEventListener('DOMContentLoaded', () => {
            const userNameDisplay = document.getElementById('userNameDisplay');
            const username = localStorage.getItem('username');
            if (userNameDisplay && username) {
                userNameDisplay.textContent = username;
            }

            const logoutBtn = document.getElementById('logoutBtn');
           if (logoutBtn) {
              logoutBtn.addEventListener('click', async () => {
                const token = localStorage.getItem('token');
                try {
                  await fetch('@Url.Content("~/Auth/Logout")', { 
                    method: 'DELETE',
                    headers: token ? { 'Authorization': `Bearer ${token}` } : {},
                    credentials: 'include'
                  });
                } catch (err) { /* ignore */ }

                localStorage.removeItem('token');
                localStorage.removeItem('username');
                localStorage.removeItem('userId');
                window.location.href = '@Url.Content("~/Security/Login")';
              });
            }

            const menuContainer = document.getElementById('menuContainer');
            const rolMenuUrl = '@Url.Action("ListarPorUsuario", "RolMenus")';
            const baseUrl = '@Url.Content("~/")';

            const escapeHtml = (value) => {
                if (typeof value !== 'string') {
                    return '';
                }
                return value
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            };

            const normalizeKey = (value) => {
                if (value === null || value === undefined) {
                    return 'root';
                }
                return String(value);
            };

            const getString = (value) => (typeof value === 'string' ? value.trim() : '');

            const resolveValue = (item, ...candidates) => {
                for (const key of candidates) {
                    if (key in item) {
                        const candidate = getString(item[key]);
                        if (candidate) {
                            return candidate;
                        }
                    }
                }
                return '';
            };

            const buildUrl = (item) => {
                const ruta = resolveValue(item, 'ruta', 'Ruta');
                const controller = resolveValue(item, 'controller', 'Controller');
                const action = resolveValue(item, 'cAction', 'CAction');

                let rawPath = ruta;

                if (!rawPath) {
                    if (controller) {
                        rawPath = action ? `${controller}/${action}` : controller;
                    } else {
                        return '#';
                    }
                } else if (controller && action) {
                    const trimmedRuta = rawPath.replace(/^\/+|\/+$/g, '');
                    const controllerPath = controller.replace(/^\/+|\/+$/g, '');
                    if (trimmedRuta.toLowerCase() === controllerPath.toLowerCase()) {
                        rawPath = `${controllerPath}/${action}`;
                    }
                }

                if (/^https?:/i.test(rawPath)) {
                    return rawPath;
                }

                const hasTrailingSlash = baseUrl.endsWith('/');
                if (rawPath.startsWith('/')) {
                    if (hasTrailingSlash) {
                        return baseUrl === '/' ? rawPath : baseUrl + rawPath.substring(1);
                    }
                    return baseUrl + rawPath;
                }

                return hasTrailingSlash ? baseUrl + rawPath : `${baseUrl}/${rawPath}`;
            };

            const resolveBool = (item, ...candidates) => {
                for (const key of candidates) {
                    if (key in item) {
                        return Boolean(item[key]);
                    }
                }
                return false;
            };

            const resolveNumber = (item, ...candidates) => {
                for (const key of candidates) {
                    if (key in item) {
                        const value = Number(item[key]);
                        if (!Number.isNaN(value)) {
                            return value;
                        }
                    }
                }
                return 0;
            };

            const iconClass = (icon) => {
                const sanitized = (typeof icon === 'string' && icon.trim().length > 0) ? icon.trim() : 'bi-circle';
                return `bi ${sanitized} me-2`;
            };

            const buildMenuMarkup = (itemsMap, parentKey) => {
                const items = itemsMap.get(parentKey);
                if (!items || items.length === 0) {
                    return '';
                }

                return items
                    .map(item => {
                        const key = normalizeKey(item.menuId ?? item.MenuId);
                        const childrenMarkup = buildMenuMarkup(itemsMap, key);
                        const displayName = escapeHtml(item.nombre ?? item.Nombre ?? '');
                        const iconMarkup = `<i class="${iconClass(item.icono ?? item.Icono)}"></i>`;

                        if (childrenMarkup) {
                            const collapseId = `submenu-${key}`;
                            return `
<a class="d-block py-2 text-white" data-bs-toggle="collapse" href="#${collapseId}" role="button" aria-expanded="false" aria-controls="${collapseId}">${iconMarkup} ${displayName}</a>
<div class="collapse ps-3" id="${collapseId}">
${childrenMarkup}
</div>`;
                        }

                        const href = buildUrl(item);
                        return `<a href="${href}" class="d-block py-2 text-white">${iconMarkup} ${displayName}</a>`;
                    })
                    .join('\n');
            };

            const loadDynamicMenu = async () => {
                if (!menuContainer) {
                    return;
                }

                const userId = localStorage.getItem('userId');
                if (!userId) {
                    menuContainer.innerHTML = '';
                    return;
                }

                const token = localStorage.getItem('token');

                try {
                    const response = await fetch(`${rolMenuUrl}?usuarioId=${userId}`, {
                        headers: token ? { 'Authorization': `Bearer ${token}` } : {},
                        credentials: 'include'
                    });

                    if (!response.ok) {
                        throw new Error(`Error al obtener el menú (${response.status})`);
                    }

                    const result = await response.json();
                    if (!result.success || !Array.isArray(result.data)) {
                        menuContainer.innerHTML = '';
                        return;
                    }

                    const filteredItems = result.data
                        .filter(item => item && resolveBool(item, 'visible', 'Visible') && resolveBool(item, 'puedeVer', 'PuedeVer'))
                        .sort((a, b) => resolveNumber(a, 'orden', 'Orden') - resolveNumber(b, 'orden', 'Orden'));

                    const itemsMap = new Map();
                    filteredItems.forEach(item => {
                        const key = normalizeKey(item.parentId ?? item.ParentId);
                        if (!itemsMap.has(key)) {
                            itemsMap.set(key, []);
                        }
                        itemsMap.get(key).push(item);
                    });

                    itemsMap.forEach(list => list.sort((a, b) => resolveNumber(a, 'orden', 'Orden') - resolveNumber(b, 'orden', 'Orden')));

                    const markup = buildMenuMarkup(itemsMap, 'root');
                    menuContainer.innerHTML = markup || '';
                } catch (error) {
                    console.error('Error cargando el menú del usuario:', error);
                    menuContainer.innerHTML = '';
                }
            };

            loadDynamicMenu();

            const dropdownBtn = document.getElementById('userDropdownBtn');
            const dropdownMenu = document.getElementById('userDropdownMenu');
            if (dropdownBtn && dropdownMenu) {
                const dropdown = new bootstrap.Dropdown(dropdownBtn, { autoClose: true });
                let hideTimeout;
                const showDropdown = () => {
                    clearTimeout(hideTimeout);
                    dropdown.show();
                };
                const hideDropdown = () => {
                    hideTimeout = setTimeout(() => dropdown.hide(), 200);
                };
                dropdownBtn.addEventListener('mouseenter', showDropdown);
                dropdownBtn.addEventListener('mouseleave', hideDropdown);
                dropdownMenu.addEventListener('mouseenter', showDropdown);
                dropdownMenu.addEventListener('mouseleave', hideDropdown);
            }
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
