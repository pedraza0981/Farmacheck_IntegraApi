@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Login - Farmacheck</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary-dark: #06264c;
            --primary: #0a4c9b;
            --primary-light: #4ea3ff;
            --card-radius: 24px;
            --card-shadow: 0 25px 45px rgba(10, 33, 73, 0.15);
            --input-border: rgba(6, 38, 76, 0.18);
        }

        body {
            font-family: "Poppins", "Segoe UI", Arial, sans-serif;
            background: radial-gradient(110% 160% at 0% 0%, #f4f9ff 0%, #ffffff 50%, #ecf3ff 100%);
            min-height: 100vh;
            color: var(--primary-dark);
        }

        .login-container {
            min-height: 80vh;
        }

        .login-panel {
            width: 100%;
            max-width: 400px;
            background: linear-gradient(165deg, rgba(255, 255, 255, 0.95) 0%, #ffffff 100%);
            border-radius: var(--card-radius);
            box-shadow: var(--card-shadow);
            padding: 2.5rem 2.25rem;
        }

        .login-panel h4 {
            color: var(--primary-dark);
            font-weight: 600;
            margin-top: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 600;
            color: rgba(6, 38, 76, 0.8);
            font-size: 0.95rem;
        }

        .form-control.custom-input {
            border: 1px solid var(--input-border);
            border-radius: 14px;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
            box-shadow: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .form-control.custom-input:focus {
            border-color: rgba(15, 95, 194, 0.5);
            box-shadow: 0 0 0 4px rgba(78, 163, 255, 0.15);
        }

        .toggle-visibility {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: rgba(6, 38, 76, 0.55);
            font-size: 1.1rem;
            transition: color 0.2s ease;
        }

        .toggle-visibility:hover {
            color: var(--primary);
        }

        .btn-primary.custom-primary {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            border: none;
            border-radius: 14px;
            font-weight: 600;
            padding: 0.8rem 1.5rem;
            box-shadow: 0 16px 32px rgba(15, 95, 194, 0.25);
        }

        .btn-primary.custom-primary:hover,
        .btn-primary.custom-primary:focus {
            background: linear-gradient(135deg, #0d5dbb 0%, #54b2ff 100%);
            box-shadow: 0 20px 36px rgba(15, 95, 194, 0.32);
        }

        .forgot-password-link {
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--primary);
            text-decoration: none;
        }

        .forgot-password-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }

        .password-update-modal .modal-dialog {
            max-width: 420px;
        }

        .password-update-modal .modal-content {
            border: none;
            background: transparent;
            box-shadow: none;
        }

        .password-card {
            position: relative;
            background: linear-gradient(170deg, rgba(255, 255, 255, 0.92) 0%, rgba(255, 255, 255, 0.98) 100%);
            border-radius: var(--card-radius);
            box-shadow: var(--card-shadow);
            padding: 2.75rem 2.5rem 2.5rem;
            overflow: hidden;
            text-align: center;
        }

        .password-card::before {
            content: "";
            position: absolute;
            inset: -120px -40px auto;
            height: 320px;
            background: url('@Url.Content("~/images/ChatGPT Image 2 oct 2025, 10_00_18 p.m..png")') center/contain no-repeat;
            opacity: 0.12;
            pointer-events: none;
        }

        .password-card h2 {
            position: relative;
            z-index: 1;
            color: var(--primary-dark);
            font-weight: 700;
            font-size: 1.55rem;
            margin-bottom: 0.35rem;
        }

        .password-card p {
            position: relative;
            z-index: 1;
            color: rgba(6, 38, 76, 0.68);
            margin-bottom: 1.75rem;
            font-size: 0.95rem;
        }

        .password-card .form-group {
            position: relative;
            margin-bottom: 1.25rem;
            text-align: left;
            z-index: 1;
        }

        .password-card .form-label {
            color: rgba(6, 38, 76, 0.78);
            font-size: 0.9rem;
        }

        .password-card .form-control.custom-input {
            background-color: rgba(255, 255, 255, 0.95);
        }

        .password-card .toggle-visibility {
            color: rgba(6, 38, 76, 0.45);
            font-size: 1.05rem;
        }

        .password-card .toggle-visibility:hover {
            color: var(--primary);
        }

        .password-card .btn {
            position: relative;
            z-index: 1;
            width: 100%;
        }

        @media (max-width: 576px) {
            .login-panel {
                padding: 2rem 1.5rem;
            }

            .password-update-modal .modal-dialog {
                margin: 1.5rem auto;
            }

            .password-card {
                padding: 2.25rem 1.75rem 2.25rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <div style="width:100%;">
                    <div class="row">
                        <img src="~/images/Logo_Header.png" style="width: 10%; height: auto;" />
                    </div>
                    <div class="row">
                        <img src="~/images/Linea_Header.png" style="width: 100%; height: auto;" />
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div class="container d-flex justify-content-center align-items-center login-container">
        <div class="login-panel">
            <div class="text-center">
                <h4>Iniciar sesión</h4>
            </div>
            <form id="loginForm">
                <div class="mb-3">
                    <label for="email" class="form-label">Correo electrónico</label>
                    <input type="email" id="email" name="email" placeholder="usuario@dominio.com" class="form-control custom-input" required>
                </div>
                <div class="mb-4">
                    <label for="password" class="form-label">Contraseña</label>
                    <div class="position-relative">
                        <input type="password" id="password" name="password" placeholder="••••••••" class="form-control custom-input" required>
                        <i id="togglePassword" class="bi bi-eye toggle-visibility"></i>
                    </div>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary custom-primary w-100">Entrar</button>
                </div>
            </form>
            <div class="text-center mt-3">
                <a href="/forgot-password" class="forgot-password-link">¿Olvidaste tu contraseña?</a>
            </div>
        </div>
    </div>
    <div class="modal fade password-update-modal" id="passwordUpdateModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="password-card">
                    <h2>Actualizar contraseña</h2>
                    <p>Ingresa una nueva contraseña segura para continuar.</p>
                    <div class="form-group">
                        <label for="newPassword" class="form-label">Nueva contraseña</label>
                        <div class="position-relative">
                            <input type="password" id="newPassword" placeholder="••••••••" class="form-control custom-input" required>
                            <i id="toggleNewPassword" class="bi bi-eye toggle-visibility"></i>
                        </div>
                    </div>
                    <div class="form-group mb-4">
                        <label for="confirmPassword" class="form-label">Confirmar contraseña</label>
                        <div class="position-relative">
                            <input type="password" id="confirmPassword" placeholder="••••••••" class="form-control custom-input" required>
                            <i id="toggleConfirmPassword" class="bi bi-eye toggle-visibility"></i>
                        </div>
                    </div>
                    <button id="updatePasswordButton" type="button" class="btn btn-primary custom-primary">Actualizar Password</button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let passwordModal;
        let allowModalClose = false;
        let modalRedirectUrl = null;
        let loginEmail = '';

        const needsPasswordUpdate = async (email) => {
            try {
                const response = await fetch('@Url.Action("GetUserByEmail", "Auth")' + `?email=${encodeURIComponent(email)}`, {
                    method: 'GET',
                    credentials: 'include'
                });

                if (!response.ok) {
                    return false;
                }

                const result = await response.json();
                return result.success && result.data && result.data.actualizaPass === true;
            } catch (error) {
                console.error('Error al obtener información del usuario:', error);
                return false;
            }
        };

        document.addEventListener('DOMContentLoaded', function () {
            const loginForm = document.getElementById('loginForm');
            const modalElement = document.getElementById('passwordUpdateModal');

            passwordModal = new bootstrap.Modal(modalElement, {
                backdrop: 'static',
                keyboard: false
            });

            modalElement.addEventListener('hide.bs.modal', function (event) {
                if (!allowModalClose) {
                    event.preventDefault();
                } else {
                    allowModalClose = false;
                    if (modalRedirectUrl) {
                        const redirectUrl = modalRedirectUrl;
                        modalRedirectUrl = null;
                        window.location.href = redirectUrl;
                    }
                }
            });

            const toggleVisibility = (toggleId, inputId) => {
                const toggle = document.getElementById(toggleId);
                const input = document.getElementById(inputId);

                if (!toggle || !input) {
                    return;
                }

                toggle.addEventListener('click', function () {
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    this.classList.toggle('bi-eye');
                    this.classList.toggle('bi-eye-slash');
                });
            };

            toggleVisibility('togglePassword', 'password');
            toggleVisibility('toggleNewPassword', 'newPassword');
            toggleVisibility('toggleConfirmPassword', 'confirmPassword');

            loginForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;

                const response = await fetch('@Url.Action("Login", "Auth")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ email: email, password: password })
                });

                const result = await response.json();
                if (response.ok && result.success && result.data && result.data.token) {
                    loginEmail = email;
                    localStorage.setItem('username', email);
                    localStorage.setItem('token', result.data.token);

                    const mustUpdatePassword = await needsPasswordUpdate(email);
                    if (mustUpdatePassword) {
                        passwordModal.show();
                        return;
                    }

                    window.location.href = '@Url.Action("Index", "Formularios")';
                } else {
                    const message = (response.ok && result.success)
                        ? 'Autenticación incorrecta, verificar mail o contraseña'
                        : (result.error || 'Error al iniciar sesión');

                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: message
                    });
                }
            });

            document.getElementById('updatePasswordButton').addEventListener('click', async function () {
                const newPasswordInput = document.getElementById('newPassword');
                const confirmPasswordInput = document.getElementById('confirmPassword');

                const newPassword = newPasswordInput.value.trim();
                const confirmPassword = confirmPasswordInput.value.trim();

                if (newPassword.length === 0 || confirmPassword.length === 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Contraseña requerida',
                        text: 'Debes ingresar y confirmar la nueva contraseña.'
                    });
                    return;
                }

                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Contraseñas diferentes',
                        text: 'La nueva contraseña y su confirmación deben ser iguales.'
                    });
                    return;
                }

                try {
                    const response = await fetch('@Url.Action("UpdatePassword", "Auth")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({ email: loginEmail, password: newPassword })
                    });

                    const result = await response.json();

                    if (response.ok && result.success) {
                        localStorage.removeItem('username');
                        localStorage.removeItem('token');

                        Swal.fire({
                            icon: 'success',
                            title: 'Contraseña actualizada',
                            text: 'La contraseña se actualizó correctamente. Inicia sesión nuevamente.'
                        }).then(() => {
                            modalRedirectUrl = '@Url.Action("Login", "Security")';
                            allowModalClose = true;
                            passwordModal.hide();
                        });
                    } else {
                        const message = result.error || 'No fue posible actualizar la contraseña.';
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: message
                        });
                    }
                } catch (error) {
                    console.error('Error al actualizar la contraseña:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Ocurrió un error al intentar actualizar la contraseña.'
                    });
                }
            });
        });
    </script>
</body>
</html>
